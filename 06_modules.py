# -*- coding: utf-8 -*-
"""06_Modules.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NNrkWT-byjtExU1lhg9en9goh-ivFEXD

##***Welcome to your Sixth iPython Notebook.***

![python](https://cognitiveclass.ai/wp-content/uploads/2016/10/Machine-Learning-with-Python.png)

## **About iPython Notebooks**

iPython Notebooks are interactive coding environments embedded in a webpage. You will be using iPython notebooks in this class. You only need to write code between the ### START CODE HERE ### and ### END CODE HERE ### comments. After writing your code, you can run the cell by either pressing "SHIFT"+"ENTER" or by clicking on "Run Cell" (denoted by a play symbol) in the left bar of the cell.


**In this notebook you will learn -**




*   Modules

##** Module**

A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference.

Simply, a module is a file consisting of Python code. A module can define functions, classes and variables. A module can also include runnable code.

##**Create a Module**

To create a module just save the code you want in a file with the file extension **.py**
"""

def greeting(name):
  print("Hello, " + name)

"""Save this code in a file named **mymodule.py**

##**Use a Module**

Now we can use the module we just created, by using the ** import ** statement:
"""

import mymodule

mymodule.greeting("Joey")

"""You can use any Python source file as a module by executing an import statement in some other Python source file. 

The import has the following syntax âˆ’

**import module1[, module2[,... moduleN]**


When the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches before importing a module. For example, to import the module support.py, you need to put the following command at the top of the script

##**Variables in Module**

The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc)
"""

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

"""Save the above code in the file **mymodule.py**"""

import mymodule                            

a = mymodule.person1["age"]              #Imports the module named mymodule, and access the person1 dictionary
print(a)

"""##**Import From Module**

You can choose to import only parts from a module, by using the **from**  keyword


The syntax is:  **from modname import name1[, name2[, ... nameN]]**

This statement does not import the entire module fib into the current namespace; it just introduces the item fibonacci from the module fib into the global symbol table of the importing module.

The module named mymodule has one function and one dictionary
"""

def greeting(name):
  print("Hello, " + name)

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

from mymodule import person1

print (person1["age"])              # Imports only the person1 dictionary from the module

"""##**Re-naming a Module**

You can create an alias when you import a module, by using the **as** keyword
"""

import mymodule as mx                   # Creates an alias for mymodule called mx

a = mx.person1["age"] 
print(a)

"""##**Built-in Modules**

There are several built-in modules in Python, which you can import whenever you like.
"""

import platform

x = platform.system()             #Imports and use the platform module
print(x)

"""The built-in function dir() is used to find out which names a module defines. It returns a sorted list of strings"""

import platform

x = dir(platform)                 # Lists all the defined names belonging to the platform module
print(x)

import fibo, sys
   dir(fibo)

"""**output : **
   
    ['__name__', 'fib', 'fib2']
"""