# -*- coding: utf-8 -*-
"""02_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TyBMeyMpHAAVnxzaovohdx099XSpMTx6

# Introduction to Pandas

![alt text](http://i1.wp.com/blog.adeel.io/wp-content/uploads/2016/11/pandas1.png?zoom=1.25&fit=818%2C163)

Pandas is an open-source, BSD-licensed Python library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. You can think of pandas as an extremely powerful version of Excel, with a lot more features.

## **About iPython Notebooks**

iPython Notebooks are interactive coding environments embedded in a webpage. You will be using iPython notebooks in this class. You only need to write code between the ### START CODE HERE ### and ### END CODE HERE ### comments. After writing your code, you can run the cell by either pressing "SHIFT"+"ENTER" or by clicking on "Run Cell" (denoted by a play symbol) in the left bar of the cell.

**In this notebook you will learn -**

* Series
* DataFrames
* Missing Data
* GroupBy
* Merging, Joining and Concatenating
* Operations
* Data Input and Output

## Importing Pandas
To import Pandas under the name **pd** write the following:
"""

import numpy as np
import pandas as pd

"""#Series

The first main data type we will learn about for pandas is the Series data type. 

A Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object). What differentiates the NumPy array from a Series, is that a Series can have axis labels, meaning it can be indexed by a label, instead of just a number location. It also doesn't need to hold numeric data, it can hold any arbitrary Python Object.

### Creating a Series

You can convert a list,numpy array, or dictionary to a Series:
"""

labels = ['a','b','c']
my_list = [10,20,30]
arr = np.array([10,20,30])
d = {'a':10,'b':20,'c':30}

"""** Using Lists**"""

pd.Series(data=my_list)

pd.Series(data=my_list,index=labels)

pd.Series(my_list,labels)

"""** NumPy Arrays **"""

pd.Series(arr)

pd.Series(arr,labels)

"""** Dictionary**"""

pd.Series(d)

"""### Data in a Series

A pandas Series can hold a variety of object types:
"""

pd.Series(data=labels)

# Even functions (although unlikely that you will use this)
pd.Series([sum,print,len])

"""## Using an Index

The key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary).

Let's see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2:
"""

ser1 = pd.Series([1,2,3,4],index = ['USA', 'Germany','USSR', 'Japan'])

ser1

ser2 = pd.Series([1,2,5,4],index = ['USA', 'Germany','Italy', 'Japan'])

ser2

ser1['USA']

"""Operations are then also done based off of index:"""

ser1 + ser2

"""Let's stop here for now and move on to DataFrames, which will expand on the concept of Series!
# Great Job!
"""